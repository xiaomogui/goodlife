<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 自动扫描DAO相关的包 -->
	<context:component-scan base-package="com.sain.goodlife" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="regex" expression="com.sain.goodlife.dao.*"/>
	</context:component-scan>

	<!-- 加载数据库配置的properties文件 -->
	<context:property-placeholder location="classpath*:config/db/database.properties" />

	<!-- 使用Druid数据池创建DataSource（数据源） -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

	</bean>

	<!-- 设置hibernate相关参数，取得SessionFactory源 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" depends-on="dataSource">
		<!-- 设置数据源 -->
		<property name="dataSource">
			<ref local="dataSource" />
		</property>

		<!-- 通过hibernate结合c3p0管理数据池，此属性用于配置hibernate，而不通过hibernate.cfg.xml进行配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop> <!-- 设置sql方言 -->
				<prop key="hibernate.connection.autocommit">false</prop> <!-- 是否自动提交事务 -->
				<prop key="hibernate.show_sql">true</prop> <!-- 是否在后台现实sql语句，调试时使用 -->
				<prop key="hibernate.generate_statistics">true</prop> <!-- 如果开启, Hibernate将收集有助于性能调节的统计数据. -->
				<prop key="hibernate.connection.release_mode">auto</prop> <!-- 指定Hibernate在何时释放JDBC连接. 默认情况下,直到Session被显式关闭或被断开连接时,才会释放JDBC连接. 对于应用程序服务器的JTA数据源, 你应当使用after_statement, 这样在每次JDBC调用后，都会主动的释放连接. 对于非JTA的连接, 使用after_transaction在每个事务结束时释放连接是合理的. auto将为JTA和CMT事务策略选择after_statement, 为JDBC事务策略选择after_transaction. -->
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop> <!-- 未知作用的参数，参考自jshoper3x -->
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop> <!-- 未知作用的参数，参考自jshoper3x -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop> <!-- 未知作用的参数，参考自jshoper3x -->
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop> <!-- 未知作用的参数，参考自jshoper3x -->
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop> <!-- 未知作用的参数，参考自jshoper3x -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop> <!-- 未知作用的参数，参考自jshoper3x -->
			</props>
		</property>

		<!-- 设置hibernate实体类与数据库表之间映射关系的xml文件 -->
		<property name="mappingLocations">
			<value>classpath*:com/sain/goodlife/api/entity/po/shiro/*.hbm.xml</value>
		</property>

		<!-- 设置hibernate实体类与数据库表之间映射关系的xml文件 - 其他方法 TODO -->
		<!-- 
		<property name="mappingResources">
			<list>
				<value>com/sain/goodlife/api/entity/po/shiro/ShiroUsersRolesT1.hbm.xml</value>
				<value>com/sain/goodlife/api/entity/po/shiro/ShiroRolesPermissionsT1.hbm.xml</value>
				<value>com/sain/goodlife/api/entity/po/shiro/ShiroPermissionsT1.hbm.xml</value>
				<value>com/sain/goodlife/api/entity/po/shiro/ShiroRolesT1.hbm.xml</value>

				<value>com/sain/goodlife/api/entity/po/sys/IdSequence.hbm.xml</value>

				<value>com/sain/goodlife/api/entity/po/common/UsersT1.hbm.xml</value>
				<value>com/sain/goodlife/api/entity/po/common/AdminT1.hbm.xml</value>
			</list>
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath*:com/sain/goodlife/api/entity/po/shiro/</value>
				<value>classpath*:com/sain/goodlife/api/entity/po/sys/</value>
				<value>classpath*:com/sain/goodlife/api/entity/po/common/</value>
			</list>
		</property>
		<property name="mappingJarLocations">
			<list>
				<value>WEB-INF/lib/goodlife-interface-0.0.1-SNAPSHOT.jar</value>
			</list>
		</property>
		 -->

	</bean>

</beans>
